parameters:
  - name: variableName
    type: string
  - name: environment
    type: string
  - name: subscriptionName
    type: string
  - name: outputLocation
    type: string
  - name: resourceGroup
    type: string
    default: ""
  - name: builtFrom
    type: string
    default: ""
  - name: product
    type: string
    default: ""
  - name: libarySecrets
    type: object
    default:
      - secName: "tf_secret_gov-uk-notify-api-testing-key"
        secValue: "$(tf_secret_gov-uk-notify-api-testing-key)"

steps:
  - template: templates\common\get-variable-group.yml@azTemplates
    parameters:
      subscriptionName: ${{ parameters.subscriptionName }}
      variableGroupName: "PIP-APIM-BUILD-${{ upper(parameters.environment) }}"
      variableName: "secrets"
      taskName: "group"

  - powershell: |
      $jsonPath="$env:groupJsonPath"

      $variablesJson = Get-Content $jsonPath | Out-String | ConvertFrom-Json

      $count=0
      $names="["
      $variablesJson.variables.PSObject.Properties | ForEach-Object {
        $name=$_.Name
        if ($name -like "tf_secret_*"){
          Write-Host "Found: $name"
          $names+="`"$name`","
          $varName="Secrets$count"
          Write-Host "Set: $varName = $name"
          "##vso[task.setvariable variable=$varName;isOutput=true]$name"
          $count++
        }
      }
      $names+="]"
      "##vso[task.setvariable variable=names;isOutput=true]$names"
      Write-Host "Names: $names"
    displayName: 'get secret names'
    name: "getSecret"
    env:
      groupJsonPath: $(group.secrets_path)

  - template: ../set-secrets.yaml
    parameters: 
      secretNames: ["tf_secret_test1","test2"]
      secretNames2: ["Secrets0","Secrets1","Secrets2","Secrets3"]

  - bash: |
      echo "secretNames -- ${secretNames}"
      echo "secretJson -- ${secretJson}"
      
      env -0 | while IFS='=' read -r -d '' n v; do
        envName="$n"
        envValue="$v"
        echo "processing $envName : $envValue"
      done
    displayName: 'Print Variables'
    name: tfVariablesPrint
    env:
      secretNames: "$(getSecret.names)"
      secretJson: "$(setSecretVars)"
      ${{ each sec in variables.setSecretVars }}:
        "${{ sec.Key }}_sec" : "${{ convertToJson(sec) }}"

  - bash: |
      variableName="${{ parameters.variableName }}"
      secureFileJson=$(printenv secure_file_json)
      variableGroupJson=$(printenv variable_group_json)
      variables=""
      variables="-var-file=\"$(System.DefaultWorkingDirectory)/environments/${{ parameters.environment }}.tfvars\""
      variables="${variables} -var-file=\"$(System.DefaultWorkingDirectory)/environments/shared.tfvars\""
      variables="${variables} -out=\"${{ parameters.outputLocation }}\""
      variables="${variables} -var \"builtFrom=${{ parameters.builtFrom }} \""
      variables="${variables} -var \"product=${{ parameters.product }}\""

      secretArr=$(env -0 | while IFS='=' read -r -d '' n v; do
        envName="$n"
        #echo "processing $envName"
        if [[ "${envName}" == 'tf_secret_'* ]]; then
          envName="${envName//tf_secret_/}"
          envValue="$v"
          #echo "found $envName"
          echo "{\\\"name\\\":\\\"$envName\\\",\\\"value\\\":\\\"$envValue\\\"},"
          #echo "found $secretArr"
        fi
      done)
      secretArr="[${secretArr}]"
      variables="${variables} -var \"secrets_arr=${secretArr}\""

      echo "Variables set as: "
      echo "${variables}"
      echo "##vso[task.setvariable variable=$variableName;isOutput=true]${variables}"
    displayName: 'Set Shared Services TF Variables'
    name: tfVariables
    env:
      ${{ each sec in variables.names }}:
        "${{ sec }}" : "$(${{ sec }})"