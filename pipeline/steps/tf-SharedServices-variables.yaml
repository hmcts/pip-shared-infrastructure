parameters:
  - name: variableName
    type: string
  - name: environment
    type: string
  - name: subscriptionName
    type: string
  - name: outputLocation
    type: string
  - name: resourceGroup
    type: string
    default: ""
  - name: builtFrom
    type: string
    default: ""
  - name: product
    type: string
    default: ""
  - name: libarySecrets
    type: object
    default:
      - secret:
          name: tf_secret_gov-uk-notify-api-testing-key
          value: $(tf_secret_gov-uk-notify-api-testing-key)

steps:
  - task: PowerShell@2
    displayName: 'Set Shared Services TF Variables'
    name: tfVariables
    inputs:
      targetType: inline
      script: |
        $variableName="${{ parameters.variableName }}"
        $secureFileJson=$(printenv secure_file_json)
        $variableGroupJson=$(printenv variable_group_json)

        $variables=""
        $variables="-var-file=`"$(System.DefaultWorkingDirectory)/environments/${{ parameters.environment }}.tfvars`""
        $variables="${variables} -var-file=`"$(System.DefaultWorkingDirectory)/environments/shared.tfvars`""
        $variables="${variables} -out=`"${{ parameters.outputLocation }}`""
        $variables="${variables} -var `"builtFrom=${{ parameters.builtFrom }} `""
        $variables="${variables} -var `"product=${{ parameters.product }}`""

        $secretArr=@();
        $envs = Get-ChildItem env:* | sort-object name
        Foreach ($env in $envs) { 
          $name=$env.Name 
          Write-Host "processing $name"
          if ($name -like "tf_secret_*"){
            $value=$env.Value
            Write-Host "Adding ENV: $name"
            $secretArr += @{
              name = $name
              value = $value
            }
          }
        }
        $secretStr = $secretArr | ConvertTo-Json -Compress -Depth 100
        $secretStr = $secretStr -replace "`"", "\`""
        Write-Host "secrets $secretStr"
        $variables="${variables} -var `"secrets_arr=[$secretStr]`""

        Write-Host "Variables set as: "
        Write-Host "${variables}"
        Write-Host "##vso[task.setvariable variable=$variableName;isOutput=true]${variables}"
    env:
      ${{ each secret in parameters.libarySecrets }}:
        ${{ secret.name }}: ${{ secret.value }}