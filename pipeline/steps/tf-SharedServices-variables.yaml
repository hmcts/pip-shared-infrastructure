parameters:
  - name: variableName
    type: string
  - name: environment
    type: string
  - name: subscriptionName
    type: string
  - name: outputLocation
    type: string
  - name: resourceGroup
    type: string
    default: ""
  - name: builtFrom
    type: string
    default: ""
  - name: product
    type: string
    default: ""
  - name: libarySecrets
    type: object
    default:
      - secName: "tf_secret_gov-uk-notify-api-testing-key"
        secValue: "$(tf_secret_gov-uk-notify-api-testing-key)"

steps:

  - bash: |
      variableName="${{ parameters.variableName }}"
      secureFileJson=$(printenv secure_file_json)
      variableGroupJson=$(printenv variable_group_json)
      variables=""
      variables="-var-file=\"$(System.DefaultWorkingDirectory)/environments/${{ parameters.environment }}.tfvars\""
      variables="${variables} -var-file=\"$(System.DefaultWorkingDirectory)/environments/shared.tfvars\""
      variables="${variables} -out=\"${{ parameters.outputLocation }}\""
      variables="${variables} -var \"builtFrom=${{ parameters.builtFrom }} \""
      variables="${variables} -var \"product=${{ parameters.product }}\""

      secretArr=""
      for var in "${!tf_secret_@}"; do
          envName="$var"
          echo "processing $envName"
          if [[ "${envName}" == 'tf_secret_'* ]]; then
            envName="${envName//tf_secret_/}"
            envValue="${!var}"
            echo "found $envName"
            secretArr="${secretArr} {\"name\":\"$envName\",\"value\":\"$envValue\"},"
          fi
      done
      secretArr="[${secretArr}]"
      variables="${variables} -var \"secrets_arr=${secretArr}\""

      echo "Variables set as: "
      echo "${variables}"
      echo "##vso[task.setvariable variable=$variableName;isOutput=true]${variables}"
    displayName: 'Set Shared Services TF Variables'
    name: tfVariables
    env:
      ${{ each sec in parameters.libarySecrets }}:
        "${{ sec.secName }}_env" : "${{ sec.secValue }}"