parameters:
  - name: subscription
    type: string
  - name: dependsOn
    type: string
  - name: resourceGroup
    type: string
  - name: storageAccount
    type: string
  - name: containerName
    type: string
  - name: variables
    type: object
  - name: displayName
    type: string
  - name: environment
    type: string
  - name: builtFrom
    type: string
    default: ''
  - name: product
    type: string
    default: ''
  - name: outputName
    type: string
  - name: workingDirectory
    type: string
  - name: serviceName
    type: string

jobs:
- job: PlanVariables
  dependsOn:
  - ${{ if parameters.dependsOn }}:
    - ${{ parameters.dependsOn }}
  displayName: ${{ parameters.displayName }}
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    ${{ insert }}: ${{ parameters.variables }}
  steps:
    - template: templates\common\get-variable-group.yml@azTemplates
      parameters:
        subscriptionName: ${{ parameters.subscription }}
        variableGroupName: "PIP-APIM-BUILD-${{ upper(parameters.environment) }}"
        variableName: "secrets"
        taskName: "group"

    - powershell: |
        $jsonPath="$env:groupJsonPath"

        $variablesJson = Get-Content $jsonPath | Out-String | ConvertFrom-Json

        $names="["
        $variablesJson.variables.PSObject.Properties | ForEach-Object {
          $name=$_.Name
          if ($name -like "tf_secret_*"){
            Write-Host "Found: $name"
            $names+="`"$name`","
          }
        }
        $names+="]"
        "##vso[task.setvariable variable=names;isOutput=true]$names"
        Write-Host "Names: $names"
      displayName: 'get secret names'
      name: "getSecret"
      env:
        groupJsonPath: $(group.secrets_path)

- job: TerraformPlan
  dependsOn: PlanVariables
  displayName: ${{ parameters.displayName }}
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    ${{ insert }}: ${{ parameters.variables }}
    secretVariableName: ["tf_secret_test1","tf_secret_gov_uk_notify_api_testing_key"] #$[dependencies.PlanVariables.outputs['getSecret.names']]
  steps:
  - template: ../steps/tf-install.yaml
  - template: ../steps/tf-init.yaml
    parameters:
      subscription: ${{ parameters.subscription }}
      environment: ${{ parameters.environment }}
      resourceGroup: ${{ variables.resourceGroup }}
      storageAccount: ${{ variables.storageAccount }}
      containerName: ${{ variables.containerName }}
      workingDirectory: ${{ parameters.workingDirectory }}
  - bash: |
      mkdir '$(Build.SourcesDirectory)/plans'
    displayName: Create plan directory

  - template: ../steps/tf-${{ parameters.serviceName }}-variables.yaml
    parameters:
      variableName: "varValue"
      resourceGroup: $(resourceGroup)
      environment: ${{ parameters.environment }}
      builtFrom: ${{ parameters.builtFrom }}
      product: ${{ parameters.product }}
      outputLocation: '$(Build.SourcesDirectory)/plans/${{ parameters.outputName }}.tfplan'
      subscriptionName: ${{ parameters.subscription }}

  - template: ../set-secrets.yaml
    parameters: 
      #secretNames: ["tf_secret_test1","tf_secret_gov_uk_notify_api_testing_key"]
      secretNames: $(secretVariableName)

  - template: ../steps/tf-plan.yaml
    parameters:
      subscription: ${{ parameters.subscription }}
      tfVariables: $(tfVariables.varValue)
      workingDirectory: ${{ parameters.workingDirectory }}
  
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Plan'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/plans/${{ parameters.outputName }}.tfplan'
      artifact: '${{ parameters.outputName }}'
      FileCopyOptions: '/xo'

  